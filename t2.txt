registration-form.component.ts:
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';
@Component({
 selector: 'app-registration-form',
 templateUrl: './registration-form.component.html',
 styleUrl: './registration-form.component.css'
})
export class RegistrationFormComponent implements OnInit{
 registerForm!: FormGroup;
 submitted!:boolean;
 constructor(private formBuilder: FormBuilder) { }
 ngOnInit() {
 this.registerForm = this.formBuilder.group({
 firstName: ['',Validators.required],
 lastName: ['', Validators.required],
 email: ['',[Validators.required,validateEmail]]
 });
 }
}
function validateEmail(c: FormControl): any {
 let EMAIL_REGEXP = /^([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})$/;
 return EMAIL_REGEXP.test(c.value) ? null : {
 emailInvalid: {
 message: "Invalid Format!"
 }
 };
}








registration-form.component.html:
<div class="container">
 <h1>Registration Form</h1>
 <form [formGroup]="registerForm">
 <div class="form-group">
 <label>First Name</label>
<input type="text" class="form-control" formControlName="firstName">
 <div *ngIf="registerForm.controls['firstName'].errors" class="alert alert-danger">
 Firstname field is invalid.
 <p *ngIf="registerForm.controls['firstName'].errors?.['required']">
 This field is required!
 </p>
 </div>
 </div>
 <div class="form-group">
 <label>Last Name</label>
 <input type="text" class="form-control" formControlName="lastName">
 <div *ngIf="registerForm.controls['lastName'].errors" class="alert alert-danger">
 Lastname field is invalid.
 <p *ngIf="registerForm.controls['lastName'].errors?.['required']">
 This field is required!
 </p>
 </div>
 </div>
 <div class="form-group">
 <label>Email</label>
 <input type="text" class="form-control" formControlName="email" />
 <div *ngIf="registerForm.controls['email'].errors" class="alert alert-danger">
 Email field is invalid.
 <p *ngIf="registerForm.controls['email'].errors?.['required']">
 This field is required!
 </p>
 <p *ngIf="registerForm.controls['email'].errors?.['emailInvalid']">
 {{ registerForm.controls['email'].errors['emailInvalid'].message }}
 </p>
 </div>
 </div>
<button type="submit" class="btn btn-primary"
(click)="submitted=true">Submit</button>
 </form>
 <br />
 <div [hidden]="!submitted">
 <h3> Employee Details </h3>
 <p>First Name: {{ registerForm.get('firstName')?.value }} </p>
 <p> Last Name: {{ registerForm.get('lastName')?.value }} </p>
 <p>Email: {{ registerForm.get('email')?.value }}</p>
 </div>
</div>











registration-form.component.css:
.ng-valid[required] {
 border-left: 5px solid #42A948;
}
.ng-invalid:not(form) {
 border-left: 5px solid #a94442;
}





app.component.ts:
<app-registration-form></app-registration-form>



app.module.ts:
import { NgModule } from '@angular/core';
import { BrowserModule, provideClientHydration } from '@angular/platform-browser';
import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { ReactiveFormsModule } from '@angular/forms';
import { RegistrationFormComponent } from './registration-form/registrationform.component';
@NgModule({
 declarations: [
 AppComponent,
 RegistrationFormComponent,
 ],
 imports: [
 BrowserModule,
 AppRoutingModule,
 ReactiveFormsModule
 ],
 providers: [],
 bootstrap: [
 AppComponent,
 ]
})
export class AppModule { }